// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir v4.1.0

package v1

import (
	"net/http"

	"github.com/alimy/mir/v4"
	"github.com/gin-gonic/gin"
	"github.com/rocboss/paopao-ce/internal/model/web"
)

type Followship interface {
	_default_

	// Chain provide handlers chain for gin
	Chain() gin.HandlersChain

	ListFollowings(*gin.Context, *web.ListFollowingsReq) (*web.ListFollowingsResp, mir.Error)
	ListFollows(*gin.Context, *web.ListFollowsReq) (*web.ListFollowsResp, mir.Error)
	UnfollowUser(*gin.Context, *web.UnfollowUserReq) mir.Error
	FollowUser(*gin.Context, *web.FollowUserReq) mir.Error

	mustEmbedUnimplementedFollowshipServant()
}

// RegisterFollowshipServant register Followship servant to gin
func RegisterFollowshipServant(e *gin.Engine, s Followship) {
	router := e.Group("v1")
	// use chain for router
	middlewares := s.Chain()
	router.Use(middlewares...)

	// register routes info to router
	router.Handle("GET", "/user/followings", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.ListFollowingsReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.ListFollowings(c, req)
		s.Render(c, resp, err)
	})
	router.Handle("GET", "/user/follows", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.ListFollowsReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.ListFollows(c, req)
		s.Render(c, resp, err)
	})
	router.Handle("POST", "/user/unfollow", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.UnfollowUserReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.UnfollowUser(c, req))
	})
	router.Handle("POST", "/user/follow", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.FollowUserReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.FollowUser(c, req))
	})
}

// UnimplementedFollowshipServant can be embedded to have forward compatible implementations.
type UnimplementedFollowshipServant struct{}

func (UnimplementedFollowshipServant) Chain() gin.HandlersChain {
	return nil
}

func (UnimplementedFollowshipServant) ListFollowings(c *gin.Context, req *web.ListFollowingsReq) (*web.ListFollowingsResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedFollowshipServant) ListFollows(c *gin.Context, req *web.ListFollowsReq) (*web.ListFollowsResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedFollowshipServant) UnfollowUser(c *gin.Context, req *web.UnfollowUserReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedFollowshipServant) FollowUser(c *gin.Context, req *web.FollowUserReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedFollowshipServant) mustEmbedUnimplementedFollowshipServant() {}
