// Code generated by go-mir. DO NOT EDIT.
// versions:
// - mir v4.2.0

package v1

import (
	"context"
	"net/http"

	"github.com/alimy/mir/v4"
	"github.com/gin-gonic/gin"
	"github.com/rocboss/paopao-ce/internal/model/web"
)

type Priv interface {
	_default_

	// Chain provide handlers chain for gin
	Chain() gin.HandlersChain

	UnfollowTopic(context.Context, *web.UnfollowTopicReq) mir.Error
	FollowTopic(context.Context, *web.FollowTopicReq) mir.Error
	PinTopic(context.Context, *web.PinTopicReq) (*web.PinTopicResp, mir.Error)
	StickTopic(context.Context, *web.StickTopicReq) (*web.StickTopicResp, mir.Error)
	ThumbsDownTweetReply(context.Context, *web.TweetReplyThumbsReq) mir.Error
	ThumbsUpTweetReply(context.Context, *web.TweetReplyThumbsReq) mir.Error
	ThumbsDownTweetComment(context.Context, *web.TweetCommentThumbsReq) mir.Error
	ThumbsUpTweetComment(context.Context, *web.TweetCommentThumbsReq) mir.Error
	DeleteCommentReply(context.Context, *web.DeleteCommentReplyReq) mir.Error
	CreateCommentReply(context.Context, *web.CreateCommentReplyReq) (*web.CreateCommentReplyResp, mir.Error)
	HighlightComment(context.Context, *web.HighlightCommentReq) (*web.HighlightCommentResp, mir.Error)
	DeleteComment(context.Context, *web.DeleteCommentReq) mir.Error
	CreateComment(context.Context, *web.CreateCommentReq) (*web.CreateCommentResp, mir.Error)
	VisibleTweet(context.Context, *web.VisibleTweetReq) (*web.VisibleTweetResp, mir.Error)
	HighlightTweet(context.Context, *web.HighlightTweetReq) (*web.HighlightTweetResp, mir.Error)
	StickTweet(context.Context, *web.StickTweetReq) (*web.StickTweetResp, mir.Error)
	LockTweet(context.Context, *web.LockTweetReq) (*web.LockTweetResp, mir.Error)
	CollectionTweet(context.Context, *web.CollectionTweetReq) (*web.CollectionTweetResp, mir.Error)
	StarTweet(context.Context, *web.StarTweetReq) (*web.StarTweetResp, mir.Error)
	DeleteTweet(context.Context, *web.DeleteTweetReq) mir.Error
	CreateTweet(context.Context, *web.CreateTweetReq) (*web.CreateTweetResp, mir.Error)
	DownloadAttachment(context.Context, *web.DownloadAttachmentReq) (*web.DownloadAttachmentResp, mir.Error)
	DownloadAttachmentPrecheck(context.Context, *web.DownloadAttachmentPrecheckReq) (*web.DownloadAttachmentPrecheckResp, mir.Error)
	UploadAttachment(context.Context, *web.UploadAttachmentReq) (*web.UploadAttachmentResp, mir.Error)

	mustEmbedUnimplementedPrivServant()
}

type PrivChain interface {
	ChainCreateTweet() gin.HandlersChain

	mustEmbedUnimplementedPrivChain()
}

// RegisterPrivServant register Priv servant to gin
func RegisterPrivServant(e *gin.Engine, s Priv, m ...PrivChain) {
	var cc PrivChain
	if len(m) > 0 {
		cc = m[0]
	} else {
		cc = &UnimplementedPrivChain{}
	}
	router := e.Group("v1")
	// use chain for router
	middlewares := s.Chain()
	router.Use(middlewares...)

	// register routes info to router
	router.Handle("POST", "/topic/unfollow", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.UnfollowTopicReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.UnfollowTopic(c.Request.Context(), req))
	})
	router.Handle("POST", "/topic/follow", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.FollowTopicReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.FollowTopic(c.Request.Context(), req))
	})
	router.Handle("POST", "/topic/pin", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.PinTopicReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.PinTopic(c.Request.Context(), req)
		s.Render(c, resp, err)
	})
	router.Handle("POST", "/topic/stick", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.StickTopicReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.StickTopic(c.Request.Context(), req)
		s.Render(c, resp, err)
	})
	router.Handle("POST", "/tweet/reply/thumbsdown", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.TweetReplyThumbsReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.ThumbsDownTweetReply(c.Request.Context(), req))
	})
	router.Handle("POST", "/tweet/reply/thumbsup", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.TweetReplyThumbsReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.ThumbsUpTweetReply(c.Request.Context(), req))
	})
	router.Handle("POST", "/tweet/comment/thumbsdown", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.TweetCommentThumbsReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.ThumbsDownTweetComment(c.Request.Context(), req))
	})
	router.Handle("POST", "/tweet/comment/thumbsup", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.TweetCommentThumbsReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.ThumbsUpTweetComment(c.Request.Context(), req))
	})
	router.Handle("DELETE", "/post/comment/reply", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.DeleteCommentReplyReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.DeleteCommentReply(c.Request.Context(), req))
	})
	router.Handle("POST", "/post/comment/reply", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.CreateCommentReplyReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.CreateCommentReply(c.Request.Context(), req)
		s.Render(c, resp, err)
	})
	router.Handle("POST", "/post/comment/highlight", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.HighlightCommentReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.HighlightComment(c.Request.Context(), req)
		s.Render(c, resp, err)
	})
	router.Handle("DELETE", "/post/comment", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.DeleteCommentReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.DeleteComment(c.Request.Context(), req))
	})
	router.Handle("POST", "/post/comment", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.CreateCommentReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.CreateComment(c.Request.Context(), req)
		s.Render(c, resp, err)
	})
	router.Handle("POST", "/post/visibility", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.VisibleTweetReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.VisibleTweet(c.Request.Context(), req)
		s.Render(c, resp, err)
	})
	router.Handle("POST", "/post/highlight", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.HighlightTweetReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.HighlightTweet(c.Request.Context(), req)
		s.Render(c, resp, err)
	})
	router.Handle("POST", "/post/stick", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.StickTweetReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.StickTweet(c.Request.Context(), req)
		s.Render(c, resp, err)
	})
	router.Handle("POST", "/post/lock", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.LockTweetReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.LockTweet(c.Request.Context(), req)
		s.Render(c, resp, err)
	})
	router.Handle("POST", "/post/collection", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.CollectionTweetReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.CollectionTweet(c.Request.Context(), req)
		s.Render(c, resp, err)
	})
	router.Handle("POST", "/post/star", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.StarTweetReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.StarTweet(c.Request.Context(), req)
		s.Render(c, resp, err)
	})
	router.Handle("DELETE", "/post", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.DeleteTweetReq)
		if err := s.Bind(c, req); err != nil {
			s.Render(c, nil, err)
			return
		}
		s.Render(c, nil, s.DeleteTweet(c.Request.Context(), req))
	})
	router.Handle("POST", "/post", append(cc.ChainCreateTweet(), func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.CreateTweetReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.CreateTweet(c.Request.Context(), req)
		if err != nil {
			s.Render(c, nil, err)
			return
		}
		var rv _render_ = resp
		rv.Render(c)
	})...)
	router.Handle("GET", "/attachment", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.DownloadAttachmentReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.DownloadAttachment(c.Request.Context(), req)
		s.Render(c, resp, err)
	})
	router.Handle("GET", "/attachment/precheck", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.DownloadAttachmentPrecheckReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.DownloadAttachmentPrecheck(c.Request.Context(), req)
		s.Render(c, resp, err)
	})
	router.Handle("POST", "/attachment", func(c *gin.Context) {
		select {
		case <-c.Request.Context().Done():
			return
		default:
		}
		req := new(web.UploadAttachmentReq)
		var bv _binding_ = req
		if err := bv.Bind(c); err != nil {
			s.Render(c, nil, err)
			return
		}
		resp, err := s.UploadAttachment(c.Request.Context(), req)
		s.Render(c, resp, err)
	})
}

// UnimplementedPrivServant can be embedded to have forward compatible implementations.
type UnimplementedPrivServant struct{}

func (UnimplementedPrivServant) Chain() gin.HandlersChain {
	return nil
}

func (UnimplementedPrivServant) UnfollowTopic(c context.Context, req *web.UnfollowTopicReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedPrivServant) FollowTopic(c context.Context, req *web.FollowTopicReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedPrivServant) PinTopic(c context.Context, req *web.PinTopicReq) (*web.PinTopicResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedPrivServant) StickTopic(c context.Context, req *web.StickTopicReq) (*web.StickTopicResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedPrivServant) ThumbsDownTweetReply(c context.Context, req *web.TweetReplyThumbsReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedPrivServant) ThumbsUpTweetReply(c context.Context, req *web.TweetReplyThumbsReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedPrivServant) ThumbsDownTweetComment(c context.Context, req *web.TweetCommentThumbsReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedPrivServant) ThumbsUpTweetComment(c context.Context, req *web.TweetCommentThumbsReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedPrivServant) DeleteCommentReply(c context.Context, req *web.DeleteCommentReplyReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedPrivServant) CreateCommentReply(c context.Context, req *web.CreateCommentReplyReq) (*web.CreateCommentReplyResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedPrivServant) HighlightComment(c context.Context, req *web.HighlightCommentReq) (*web.HighlightCommentResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedPrivServant) DeleteComment(c context.Context, req *web.DeleteCommentReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedPrivServant) CreateComment(c context.Context, req *web.CreateCommentReq) (*web.CreateCommentResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedPrivServant) VisibleTweet(c context.Context, req *web.VisibleTweetReq) (*web.VisibleTweetResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedPrivServant) HighlightTweet(c context.Context, req *web.HighlightTweetReq) (*web.HighlightTweetResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedPrivServant) StickTweet(c context.Context, req *web.StickTweetReq) (*web.StickTweetResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedPrivServant) LockTweet(c context.Context, req *web.LockTweetReq) (*web.LockTweetResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedPrivServant) CollectionTweet(c context.Context, req *web.CollectionTweetReq) (*web.CollectionTweetResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedPrivServant) StarTweet(c context.Context, req *web.StarTweetReq) (*web.StarTweetResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedPrivServant) DeleteTweet(c context.Context, req *web.DeleteTweetReq) mir.Error {
	return mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedPrivServant) CreateTweet(c context.Context, req *web.CreateTweetReq) (*web.CreateTweetResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedPrivServant) DownloadAttachment(c context.Context, req *web.DownloadAttachmentReq) (*web.DownloadAttachmentResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedPrivServant) DownloadAttachmentPrecheck(c context.Context, req *web.DownloadAttachmentPrecheckReq) (*web.DownloadAttachmentPrecheckResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedPrivServant) UploadAttachment(c context.Context, req *web.UploadAttachmentReq) (*web.UploadAttachmentResp, mir.Error) {
	return nil, mir.Errorln(http.StatusNotImplemented, http.StatusText(http.StatusNotImplemented))
}

func (UnimplementedPrivServant) mustEmbedUnimplementedPrivServant() {}

// UnimplementedPrivChain can be embedded to have forward compatible implementations.
type UnimplementedPrivChain struct{}

func (b *UnimplementedPrivChain) ChainCreateTweet() gin.HandlersChain {
	return nil
}

func (b *UnimplementedPrivChain) mustEmbedUnimplementedPrivChain() {}
